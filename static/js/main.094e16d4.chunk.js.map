{"version":3,"sources":["Frame.svg","App.js","index.js"],"names":["App","useState","isConnected","setIsConnected","userInfo","setUserInfo","windowABC","setWindowABC","useEffect","userData","JSON","parse","sessionStorage","getItem","checkConnectedWallet","ABCLoader","checkWindowABC","setInterval","undefined","window","abc","clearTimeout","onConnect","a","ABCProvider","provider","console","log","request","method","web3","Web3","eth","getAccounts","userAccount","getChainId","chainId","account","getBalance","ethBalance","utils","fromWei","saveUserInfo","length","setItem","stringify","ConnecteButton","className","onClick","open","src","imgfile","alt","style","fontWeight","removeItem","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"otBAAe,G,OAAA,IAA0B,mC,QCsI1BA,MA5Hf,WACE,MAAsCC,oBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAAkCJ,qBAAlC,mBAAOK,EAAP,KAAkBC,EAAlB,KAGAC,qBAAU,YACR,WACE,IAAMC,EAAWC,KAAKC,MAAMC,eAAeC,QAAQ,gBACnC,MAAZJ,IACFJ,EAAYI,GACZN,GAAe,IAGnBW,GACAC,MACC,IAGH,IAAMA,EAAY,WAChB,IAAIC,EAAiBC,aAAY,uBAChBC,IAAfC,OAAOC,IAAoBb,GAAa,GAAQA,GAAa,KAAQ,KACvE,OAAO,WAAQc,aAAaL,KAGxBM,EAAS,uCAAG,sCAAAC,EAAA,+EAGSC,MAHT,UAGRC,EAHQ,OAIdC,QAAQC,IAAIF,IACRA,EALU,iCAQNA,EAASG,QAAQ,CAAEC,OAAQ,wBARrB,cAWNC,EAAO,IAAIC,IAAKN,GAXV,UAYcK,EAAKE,IAAIC,cAZvB,eAYNC,EAZM,iBAcUJ,EAAKE,IAAIG,aAdnB,eAcNC,EAdM,OAgBNC,EAAUH,EAAY,GAhBhB,UAkBWJ,EAAKE,IAAIM,WAAWD,GAlB/B,QAkBRE,EAlBQ,OAmBZA,EAAaT,EAAKU,MAAMC,QAAQF,EAAY,SAG5CG,EAAaH,EAAYF,EAASD,GACP,IAAvBF,EAAYS,QACdjB,QAAQC,IAAI,qDAxBF,0DA4BdD,QAAQC,IACN,uRA7BY,0DAAH,qDA0CTe,EAAe,SAACH,EAAYF,EAASD,GACzC,IAAMF,EAAc,CAClBG,QAASA,GAIXlB,OAAOP,eAAegC,QAAQ,cAAelC,KAAKmC,UAAUX,IAC5D,IAAMzB,EAAWC,KAAKC,MAAMC,eAAeC,QAAQ,gBACnDR,EAAYI,GACZN,GAAe,IAGX2C,EAAiB,uBACP5B,IAAdZ,EACI,wBAAQyC,UAAU,oBAAlB,iCAGe,IAAdzC,EACC,wBAAQyC,UAAU,iBAAiBC,QAAS1B,EAA5C,mCAGA,wBAAQyB,UAAU,iBAAiBC,QAAS,kBAAM7B,OAAO8B,KAAK,+FAAgG,WAA9J,kCAKR,OACE,mCACE,sBAAKF,UAAU,MAAf,UACE,qBAAKG,IAAKC,EAASC,IAAI,YACvB,sBAAKL,UAAU,cAAf,UACE,qBAAKA,UAAU,aAAf,SACE,qBAAIM,MAAO,CAAEC,WAAY,UAAzB,cAAsC,2CAAtC,2BAEApD,GAAe,cAAC4C,EAAD,OAGjB5C,GACE,qCACE,sBAAK6C,UAAU,eAAf,UACE,qBAAKA,UAAU,YAAf,SAA2B,2EAC3B,oBAAIA,UAAU,cAAd,SACG3C,EAASiC,aAGd,8BACE,wBAAQU,UAAU,oBAAoBC,QArD/B,WACnB7B,OAAOP,eAAe2C,WAAW,eACjClD,EAAY,IACZF,GAAe,IAkDH,mCCvHhBqD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.094e16d4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Frame.e1369206.svg\";","/*****************************************/\n/* Detect the ABC Wallet Ethereum provider */\n/*****************************************/\n\nimport { useState, useEffect } from 'react';\nimport Web3 from 'web3';\nimport ABCProvider from 'abcwallet-extension-provider-api';\nimport \"./App.css\"\nimport imgfile from './Frame.svg';\n\nfunction App() {\n  const [isConnected, setIsConnected] = useState(false);\n  const [userInfo, setUserInfo] = useState({});\n  const [windowABC, setWindowABC] = useState();\n\n  // check Connected Wallet\n  useEffect(() => {\n    function checkConnectedWallet() {\n      const userData = JSON.parse(sessionStorage.getItem('userAccount'));\n      if (userData != null) {\n        setUserInfo(userData);\n        setIsConnected(true);\n      }\n    }\n    checkConnectedWallet();\n    ABCLoader()\n  }, []);\n\n  // check ABC Wallect\n  const ABCLoader = () => {\n    let checkWindowABC = setInterval(() =>\n      window.abc !== undefined ? setWindowABC(true) : setWindowABC(false), 1000);\n    return () => { clearTimeout(checkWindowABC) }\n  }\n\n  const onConnect = async () => {\n    try {\n      // this returns the provider, or null if it wasn't detected\n      const provider = await ABCProvider();\n      console.log(provider)\n      if (provider) {\n\n        // web3 객체가 있으면 계정 정보를 가져 옵니다. Ethereum에 RPC 요청을 제출하는 데 사용 합니다.\n        await provider.request({ method: 'eth_requestAccounts' });\n\n        // http 에서 동작하는 node 에 연결하기 위해 HttpProvider 를 사용해 web3 객체를 생성 합니다.\n        const web3 = new Web3(provider);\n        const userAccount = await web3.eth.getAccounts();\n\n        const chainId = await web3.eth.getChainId();\n\n        const account = userAccount[0];\n\n        let ethBalance = await web3.eth.getBalance(account);  // 지갑 잔고를 가져옵니다.\n        ethBalance = web3.utils.fromWei(ethBalance, 'ether'); // 잔액을 Wei로 변환합니다.\n\n        // 유저 정보를 state에 저장합니다.\n        saveUserInfo(ethBalance, account, chainId);\n        if (userAccount.length === 0) {\n          console.log('ABC Wallet 과 연동 하세요');\n        }\n      }\n    } catch (err) {\n      console.log(\n        '계정을 가져오는 동안 오류가 발생했습니다. 이더리움 클라이언트가 올바르게 구성되었는지 확인하십시오.'\n      );\n    }\n  };\n\n  // 연동해지\n  const onDisconnect = () => {\n    window.sessionStorage.removeItem('userAccount');\n    setUserInfo({});\n    setIsConnected(false);\n  }\n\n  // 유저정보\n  const saveUserInfo = (ethBalance, account, chainId) => {\n    const userAccount = {\n      account: account,\n      // balance: ethBalance,\n      // connectionid: chainId,\n    };\n    window.sessionStorage.setItem('userAccount', JSON.stringify(userAccount)); //유지될 사용자 데이터\n    const userData = JSON.parse(sessionStorage.getItem('userAccount'));\n    setUserInfo(userData);\n    setIsConnected(true);\n  };\n\n  const ConnecteButton = () => (\n    windowABC === undefined\n      ? <button className=\"disconnect-button\" >\n        Loading ABC Wallet\n      </button>\n      : (windowABC === true\n        ? <button className=\"connect-button\" onClick={onConnect}>\n          Connect to ABC Wallet\n        </button>\n        : <button className=\"connect-button\" onClick={() => window.open('https://chrome.google.com/webstore/detail/abc-wallet/mlhakagmgkmonhdonhkpjeebfphligng?hl=ko&', '_blank')}>Download ABC Wallet\n        </button>\n      )\n  )\n\n  return (\n    <>\n      <div className=\"app\">\n        <img src={imgfile} alt=\"imgfile\" />\n        <div className=\"app-wrapper\">\n          <div className=\"app-header\">\n            <h1 style={{ fontWeight: 'normal' }}> <b>ABC Wallet</b> Provider API Demo</h1>\n          </div>\n          {!isConnected && <ConnecteButton />}\n        </div>\n        {\n          isConnected && (\n            <>\n              <div className=\"data-wrapper\">\n                <div className='completed'><b>Successfully connected to wallet address</b></div>\n                <h2 className=\"app-details\">\n                  {userInfo.account}\n                </h2>\n              </div>\n              <div>\n                <button className=\"disconnect-button\" onClick={onDisconnect}>\n                  Disconnect\n                </button>\n              </div>\n            </>\n          )\n        }\n      </div >\n    </>\n  );\n}\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}